---

- name: (hp linux tools) clean directory {{ hplt_dir }}
  file:
    state: absent
    path: "{{ hplt_dir }}/"
  become: yes
  when:
    - hplt_clean is defined
    - hplt_clean | bool

- name: (hp linux tools) ensure directory {{ hplt_dir }} exists
  file:
    mode: "{{ hplt_dir_mode }}"
    owner: "{{ hplt_dir_owner }}"
    path: "{{ hplt_dir }}"
    state: directory
  become: yes

- name: (hp linux tools) ensure directory {{ hplt_dir }}/{{ hplt_distro_dir }} exists
  file:
    mode: "{{ hplt_dir_mode }}"
    owner: "{{ hplt_dir_owner }}"
    path: "{{ hplt_dir }}/{{ hplt_distro_dir }}"
    state: directory
  become: yes

- name: (hp linux tools) download tarball if missing or checksum differs for version {{ hplt_version }}
  get_url:
    url: "{{ hplt_file_url }}/{{ hplt_file_name }}"
    dest: "{{ hplt_tmp }}/{{ hplt_file_name }}"
    checksum: "{{ hplt_algorithm | lower }}:{{ hplt_file_checksum }}"
    use_proxy: "{{ hplt_proxy_use }}"
    timeout: "{{ hplt_download_timeout | default(300) }}"
  environment: "{{ hplt_proxy_environment }}"
  become: yes
  when: hplt_file_get | bool

- name: (hp linux tools) extract {{ hplt_file_name }}
  unarchive:
    src: "{{ hplt_tmp }}/{{ hplt_file_name }}"
    dest: "{{ hplt_dir }}/"
    owner: "{{ hplt_file_owner }}"
    group: root
    mode: "{{ hplt_file_mode }}"
    remote_src: yes
  become: yes
  when: hplt_file_extract | bool

- name: find most recent hpuefi-mod.tgz
  shell: |
    set -o pipefail;
    TMP=$(mktemp);
    find {{ hplt_dir }} -iname '{{ hplt_hpuefi_mod_find_iname }}' > "$TMP" &&
    FILE=$(cat "$TMP" | xargs -n1 basename | sort -Vr | head -1);
    echo "$FILE" "$(grep -w "$FILE" "$TMP" | head -1 | xargs -n1 dirname)"
  register: hplt_hpuefi_mod_tgz_register
  become: true
  when:
    - hplt_hpuefi_mod_find_iname is defined
    - hplt_hpuefi_mod_find_last is defined
    - hplt_hpuefi_mod_find_last | bool

- name: set most recent hpuefi-mod.tgz file and path
  set_fact:
    hplt_hpuefi_mod_tgz_file: "{{ hplt_hpuefi_mod_tgz_register.stdout | split(' ') | first }}"
    hplt_hpuefi_mod_tgz_path: "{{ hplt_hpuefi_mod_tgz_register.stdout | split(' ') | last }}"
  when:
    - hplt_hpuefi_mod_tgz_register is defined
    - hplt_hpuefi_mod_tgz_register.failed is defined
    - not hplt_hpuefi_mod_tgz_register.failed | bool
    - hplt_hpuefi_mod_find_last is defined
    - hplt_hpuefi_mod_find_last | bool

- name: find most recent hp-flash.tgz
  shell: |
    set -o pipefail;
    TMP=$(mktemp);
    find {{ hplt_dir }} -iname '{{ hplt_hp_flash_find_iname }}' > "$TMP" &&
    FILE=$(cat "$TMP" | xargs -n1 basename | sort -Vr | head -1);
    echo "$FILE" "$(grep -w "$FILE" "$TMP" | head -1 | xargs -n1 dirname)"
  register: hplt_hp_flash_tgz_register
  become: true
  when:
    - hplt_hp_flash_find_iname is defined
    - hplt_hp_flash_find_last is defined
    - hplt_hp_flash_find_last | bool

- name: set most recent hp-flash.tgz file and path
  set_fact:
    hplt_hp_flash_tgz_file: "{{ hplt_hp_flash_tgz_register.stdout | split(' ') | first }}"
    hplt_hp_flash_tgz_path: "{{ hplt_hp_flash_tgz_register.stdout | split(' ') | last }}"
  when:
    - hplt_hp_flash_tgz_register is defined
    - hplt_hp_flash_tgz_register.failed is defined
    - not hplt_hp_flash_tgz_register.failed | bool
    - hplt_hp_flash_find_last is defined
    - hplt_hp_flash_find_last | bool

- name: (hp linux tools) extract {{ hplt_hpuefi_mod_tgz_file }}
  unarchive:
    src: "{{ hplt_hpuefi_mod_tgz_path }}/{{ hplt_hpuefi_mod_tgz_file }}"
    dest: "{{ hplt_dir }}/{{ hplt_distro_dir }}"
    owner: "{{ hplt_file_owner }}"
    group: root
    mode: "{{ hplt_file_mode }}"
    remote_src: yes
  become: yes
  when: hplt_file_extract | bool

- name: (hp linux tools) extract {{ hplt_hp_flash_tgz_file }}
  unarchive:
    src: "{{ hplt_hp_flash_tgz_path }}/{{ hplt_hp_flash_tgz_file }}"
    dest: "{{ hplt_dir }}/{{ hplt_distro_dir }}"
    owner: "{{ hplt_file_owner }}"
    group: root
    mode: "{{ hplt_file_mode }}"
    remote_src: yes
  become: yes
  when: hplt_file_extract | bool
